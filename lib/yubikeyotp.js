// Generated by CoffeeScript 1.6.2
(function() {
  var crc16, crypto, mh, modhexDecode, parseOTP;

  crypto = require('crypto');

  mh = {
    'c': '0',
    'b': '1',
    'd': '2',
    'e': '3',
    'f': '4',
    'g': '5',
    'h': '6',
    'i': '7',
    'j': '8',
    'k': '9',
    'l': 'a',
    'n': 'b',
    'r': 'c',
    't': 'd',
    'u': 'e',
    'v': 'f'
  };

  crc16 = function(buf) {
    var i, j, m_crc, x, _i, _j, _len;

    m_crc = 0xffff;
    for (_i = 0, _len = buf.length; _i < _len; _i++) {
      x = buf[_i];
      m_crc ^= x;
      for (i = _j = 0; _j <= 7; i = ++_j) {
        j = m_crc & 1;
        m_crc >>= 1;
        if (j) {
          m_crc ^= 0x8408;
        }
      }
    }
    return m_crc;
  };

  modhexDecode = function(s) {
    var c, w, _i, _len;

    w = '';
    for (_i = 0, _len = s.length; _i < _len; _i++) {
      c = s[_i];
      w += mh[c];
    }
    return w;
  };

  parseOTP = function(otp, key) {
    var data, decipher, msg, pub_id, result;

    otp = /^([cbdefghiujklnrtuv]{2,32})([cbdefghiujklnrtuv]{32})$/.exec(otp);
    if (!otp) {
      return false;
    }
    key = new Buffer(key, 'hex');
    pub_id = modhexDecode(otp[1]);
    msg = modhexDecode(otp[2]);
    msg = new Buffer(msg, 'hex');
    decipher = crypto.createDecipheriv('aes-128-ecb', key, '');
    decipher.setAutoPadding(false);
    data = Buffer.concat([decipher.update(msg), decipher.final()]);
    if ((crc16(data)) !== 0xf0b8) {
      return false;
    }
    result = {
      pubUid: pub_id,
      uid: data.slice(0, 6).toString('hex'),
      useCtr: data[6] + (data[7] << 8),
      tstp: data[8] + (data[9] << 8) + (data[10] << 16),
      sessionCtr: data[11],
      rnd: data[12] + (data[13] << 8),
      crc: data[14] + (data[15] << 8)
    };
    return result;
  };

  module.exports = {
    parseOTP: parseOTP
  };

}).call(this);
